const { Analysis, Device } = require("@tago-io/sdk");

async function myAnalysis(context, scope) {
  const device = new Device({ token: "71453302-c687-4a0b-93cb-7d7dc1a319ed" });

  const radioenge_data = await device.getData({
    variable: "radioenge_current",
    qty: 9999,
  });

  const total_data = await device.getData({
    variable: "total_current",
    qty: 9999,
  });

  // Se não houver dados, sair
  if (!radioenge_data.length || !total_data.length) {
    return context.log("⚠️ Dados insuficientes para análise.");
  }

  // Função para média
  const calcMedia = (dados) => dados.reduce((a, b) => a + b.value, 0) / dados.length;

  // Função para desvio padrão
  const calcDesvio = (dados, media) =>
    Math.sqrt(dados.reduce((sum, d) => sum + Math.pow(d.value - media, 2), 0) / dados.length);

  // Cálculos para radioenge
  const media_radioenge = calcMedia(radioenge_data);
  const sigma_radioenge = calcDesvio(radioenge_data, media_radioenge);

  const standby_radioenge = radioenge_data.filter(
    d => d.value >= media_radioenge - sigma_radioenge && d.value <= media_radioenge + sigma_radioenge
  );

  const peak_radioenge = radioenge_data.filter(d => d.value > media_radioenge + sigma_radioenge);

  // Cálculos para total
  const media_total = calcMedia(total_data);
  const sigma_total = calcDesvio(total_data, media_total);

  const standby_total = total_data.filter(
    d => d.value >= media_total - sigma_total && d.value <= media_total + sigma_total
  );

  const peak_total = total_data.filter(d => d.value > media_total + sigma_total);

  // Calcular médias finais
  const standby_radioenge_avg = calcMedia(standby_radioenge);
  const peak_radioenge_avg = calcMedia(peak_radioenge);
  const standby_total_avg = calcMedia(standby_total);
  const peak_total_avg = calcMedia(peak_total);

  // Enviar variáveis ao TagoIO
  await device.sendData([
    { variable: "standby_radioenge_mA", value: parseFloat(standby_radioenge_avg.toFixed(2)), unit: "mA" },
    { variable: "peak_radioenge_mA", value: parseFloat(peak_radioenge_avg.toFixed(2)), unit: "mA" },
    { variable: "standby_total_mA", value: parseFloat(standby_total_avg.toFixed(2)), unit: "mA" },
    { variable: "peak_total_mA", value: parseFloat(peak_total_avg.toFixed(2)), unit: "mA" }
  ]);

  context.log("✅ Análise finalizada com sucesso.");
  context.log(`- Standby radioenge ≈ ${standby_radioenge_avg.toFixed(2)} mA`);
  context.log(`- Pico radioenge ≈ ${peak_radioenge_avg.toFixed(2)} mA`);
  context.log(`- Standby total ≈ ${standby_total_avg.toFixed(2)} mA`);
  context.log(`- Pico total ≈ ${peak_total_avg.toFixed(2)} mA`);
}

module.exports = new Analysis(myAnalysis);
